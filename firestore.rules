// firestore.rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection
    match /users/{userId} {
      // All authenticated users can read all user documents
      // This allows the app to display employee names, get user details for time entries, etc.
      allow read: if request.auth != null;
      
      // Only allow creation/updates by admins
      allow create, update: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Locations collection
    match /locations/{locationId} {
      // All authenticated users can read locations
      allow read: if request.auth != null;
      
      // Only admins can write
      allow create, update, delete: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Time entries collection
    match /timeEntries/{entryId} {
      // All authenticated users can read all time entries
      // This allows the app to show weekly status, team coordination, etc.
      allow read: if request.auth != null;
      
      // Users can create entries for themselves
      allow create: if request.auth != null && 
        request.resource.data.employeeId == request.auth.uid;
      
      // Only admins can update/delete
      allow update, delete: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Mowers and service intervals
    match /mowers/{mowerId} {
      // All authenticated users can read mowers (needed for time entry equipment selection)
      allow read: if request.auth != null;
      
      // Only admins can write
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /serviceIntervals/{intervalId} {
      // All authenticated users can read service intervals
      allow read: if request.auth != null;
      
      // All authenticated users can write (for service resets by employees)
      allow write: if request.auth != null;
    }

    // Service logs collection
    match /serviceLogs/{logId} {
      // All authenticated users can read service logs
      allow read: if request.auth != null;
      
      // All authenticated users can create service logs (when performing maintenance)
      allow create: if request.auth != null;
      
      // Only admins can update/delete service logs
      allow update, delete: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Notifications
    match /notifications/{notificationId} {
      // Users can only read their own notifications
      allow read, update: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      
      // System can create notifications (admins and automated processes)
      allow create: if request.auth != null;
      
      // Only admins can delete notifications
      allow delete: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Season settings
    match /season_settings/{settingId} {
      // All authenticated users can read season settings
      allow read: if request.auth != null;
      
      // Only admins can write season settings
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}